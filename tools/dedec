#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import argparse
import dedec
import sympy


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert decimal to (approximate) rational number.'
        )
    parser.add_argument(
            'decimal',
            type=str,
            help='input decimal number'
            )
    parser.add_argument(
            '--tolerance', '-t',
            type=float,
            help='absolute tolerance (default: precision of the given decimal)'
            )

    args = parser.parse_args()

    if args.tolerance is None:
        num_digits = len(args.decimal.rsplit('.', 1)[-1])
        args.tolerance = 10**(-num_digits)

    sols = dedec.dedec(
            float(args.decimal),
            abs_tol=args.tolerance,
            )

    if len(sols) == 0:
        print('No expression found that approximates %r well enough.' %
              args.decimal
              )
    else:
        diffs = [sympy.N(float(args.decimal) - sol) for sol in sols]
        order = [
            i[0] for i in sorted(
                enumerate([abs(diff) for diff in diffs]),
                key=lambda x:x[1]
                )
            ]
        for k in order:
            print('{}   {}'.format(sols[k], diffs[k]))
