#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import argparse
import dedec

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert decimal to (approximate) rational number.'
        )
    parser.add_argument(
            'decimal',
            type=str,
            help='input decimal number'
            )
    parser.add_argument(
            '--tolerance', '-t',
            type=float,
            help='absolute tolerance (default: precision of the given decimal)'
            )
    parser.add_argument(
            '--max-denominator', '-m',
            type=int,
            default=100,
            help='maximum denominator to check'
            )

    args = parser.parse_args()

    if args.tolerance is None:
        num_digits = len(args.decimal.rsplit('.', 1)[-1])
        args.tolerance = 10**(-num_digits)

    sols = dedec.dedec(
            float(args.decimal),
            abs_tol=args.tolerance,
            max_denominator=args.max_denominator
            )

    # num, denom, mult_pi, fun_name, diff = dedec.dedec(

    if len(sols) == 0:
        print('No expression found that approximates %r well enough.' %
              args.decimal
              )
    else:
        sols.sort(key=lambda x: abs(x[4]))
        for sol in sols:
            num, denom, mult_pi, fun_name, diff = sol

            print('%s   %+0.4e' % (
                dedec.repr(num, denom, mult_pi, fun_name),
                diff
                ))
